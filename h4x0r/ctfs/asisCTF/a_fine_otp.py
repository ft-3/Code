first_otp = '13424849164527521403756445050870196571038349263738328860728317613249912394547060932323343839684520029298203039106900245311207700034998334716959147829438200311424011785337046818358358274532899770739444019976548702750759221964376449467674263639489405332877286205429047747205221900410859633667819444452994244264901836440645278013911569629994840015559772578480426713528893411566592155599262250434080155667535484558046039133146405078546571150726941318644589382117179961106958604854730012959864417943117116110433747565414463069200857607867980729677018809346027128776000'
second_otp = '13424849164527521403756445050870196571038349263738328860728317613249912394547060932323343839684520029298203039106900245311207700034998334716959146957062972992302091040145650045620923931713770064053376123593200121816888327585615360126166830462353600004998930545146134023734042936956630452432336785044817138030499430861885489269968788752300344328637773184014051409886093574515467772736493399576324382475947558096836743242622483354079380836991076274554903046025698818034657982575964227896767276074570351948553592947202577196921801301072090790406579690034496279421067'

def gen_otps():
    template_phrase = 'Welcome, dear customer, the secret passphrase for today is: '

    OTP_1 = template_phrase + gen_passphrase(18)
    OTP_2 = template_phrase + gen_passphrase(18)

    otp_1 = bytes_to_long(OTP_1)
    otp_2 = bytes_to_long(OTP_2)

    nbit, e = 2048, 3
    privkey = RSA.generate(nbit, e = e)
    pubkey  = privkey.publickey().exportKey()
    n = getattr(privkey.key, 'n')

    r = otp_2 - otp_1
    if r < 0:
        r = -r
    IMP = n - r**(e**2)
    if IMP > 0:
    	c_1 = pow(otp_1, e, n)
    	c_2 = pow(otp_2, e, n)
    return pubkey, OTP_1[-18:], OTP_2[-18:], c_1, c_2
